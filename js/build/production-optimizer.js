/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ MyFitness App
 * 
 * @fileoverview –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
 * @version 1.0.0
 * @author MyFitness App Team
 */

class ProductionOptimizer {
  constructor() {
    this.optimizationConfig = {
      minify: true,
      compress: true,
      cacheBusting: true,
      removeComments: true,
      removeConsoleLogs: true,
      optimizeImages: true,
      enableGzip: true
    };
    
    this.buildStats = {
      originalSize: 0,
      optimizedSize: 0,
      compressionRatio: 0,
      filesProcessed: 0,
      timeSpent: 0
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  async optimizeForProduction() {
    console.log('üè≠ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...');
    
    const startTime = performance.now();
    
    try {
      // 1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await this.analyzeCurrentState();
      
      // 2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JavaScript
      await this.optimizeJavaScript();
      
      // 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CSS
      await this.optimizeCSS();
      
      // 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è HTML
      await this.optimizeHTML();
      
      // 5. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      await this.optimizeImages();
      
      // 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      await this.setupCaching();
      
      // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
      await this.generateReports();
      
      const totalTime = performance.now() - startTime;
      this.buildStats.timeSpent = totalTime;
      
      console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${totalTime.toFixed(2)}ms`);
      this.printOptimizationResults();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  async analyzeCurrentState() {
    console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    const jsFiles = this.getJavaScriptFiles();
    const cssFiles = this.getCSSFiles();
    const htmlFiles = this.getHTMLFiles();
    
    this.buildStats.originalSize = this.calculateTotalSize([
      ...jsFiles,
      ...cssFiles,
      ...htmlFiles
    ]);
    
    this.buildStats.filesProcessed = jsFiles.length + cssFiles.length + htmlFiles.length;
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${this.buildStats.filesProcessed}`);
    console.log(`üìè –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(this.buildStats.originalSize / 1024).toFixed(2)} KB`);
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JavaScript
   */
  async optimizeJavaScript() {
    console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JavaScript...');
    
    const jsFiles = this.getJavaScriptFiles();
    let totalOptimizedSize = 0;
    
    for (const file of jsFiles) {
      const originalSize = this.getFileSize(file);
      const optimizedCode = await this.minifyJavaScript(file);
      const optimizedSize = new Blob([optimizedCode]).size;
      
      totalOptimizedSize += optimizedSize;
      
      console.log(`  üìÑ ${file}: ${(originalSize / 1024).toFixed(2)}KB ‚Üí ${(optimizedSize / 1024).toFixed(2)}KB`);
    }
    
    this.buildStats.optimizedSize += totalOptimizedSize;
  }

  /**
   * –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è JavaScript
   */
  async minifyJavaScript(filePath) {
    try {
      // –ë–∞–∑–æ–≤–∞—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±—ã Terser –∏–ª–∏ UglifyJS)
      let code = await this.readFile(filePath);
      
      if (this.optimizationConfig.removeComments) {
        code = this.removeComments(code);
      }
      
      if (this.optimizationConfig.removeConsoleLogs) {
        code = this.removeConsoleLogs(code);
      }
      
      if (this.optimizationConfig.minify) {
        code = this.minifyCode(code);
      }
      
      return code;
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ ${filePath}:`, error);
      return await this.readFile(filePath);
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   */
  removeComments(code) {
    return code
      // –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      .replace(/\/\/.*$/gm, '')
      // –£–¥–∞–ª—è–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      .replace(/\/\*[\s\S]*?\*\//g, '')
      // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      .replace(/^\s*[\r\n]/gm, '');
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ console.log
   */
  removeConsoleLogs(code) {
    return code
      .replace(/console\.(log|warn|error|info|debug)\([^)]*\);?/g, '')
      .replace(/console\.(log|warn|error|info|debug)\([^)]*\)/g, '');
  }

  /**
   * –ë–∞–∑–æ–≤–∞—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞
   */
  minifyCode(code) {
    return code
      // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/\s+/g, ' ')
      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
      .replace(/\s*([{}();,=+\-*/<>!&|])\s*/g, '$1')
      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
      .trim();
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CSS
   */
  async optimizeCSS() {
    console.log('üé® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CSS...');
    
    const cssFiles = this.getCSSFiles();
    let totalOptimizedSize = 0;
    
    for (const file of cssFiles) {
      const originalSize = this.getFileSize(file);
      const optimizedCSS = await this.minifyCSS(file);
      const optimizedSize = new Blob([optimizedCSS]).size;
      
      totalOptimizedSize += optimizedSize;
      
      console.log(`  üé® ${file}: ${(originalSize / 1024).toFixed(2)}KB ‚Üí ${(optimizedSize / 1024).toFixed(2)}KB`);
    }
    
    this.buildStats.optimizedSize += totalOptimizedSize;
  }

  /**
   * –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è CSS
   */
  async minifyCSS(filePath) {
    try {
      let css = await this.readFile(filePath);
      
      if (this.optimizationConfig.removeComments) {
        css = css.replace(/\/\*[\s\S]*?\*\//g, '');
      }
      
      if (this.optimizationConfig.minify) {
        css = css
          .replace(/\s+/g, ' ')
          .replace(/\s*([{}:;,])\s*/g, '$1')
          .replace(/;\}/g, '}')
          .trim();
      }
      
      return css;
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ CSS ${filePath}:`, error);
      return await this.readFile(filePath);
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è HTML
   */
  async optimizeHTML() {
    console.log('üåê –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è HTML...');
    
    const htmlFiles = this.getHTMLFiles();
    let totalOptimizedSize = 0;
    
    for (const file of htmlFiles) {
      const originalSize = this.getFileSize(file);
      const optimizedHTML = await this.minifyHTML(file);
      const optimizedSize = new Blob([optimizedHTML]).size;
      
      totalOptimizedSize += optimizedSize;
      
      console.log(`  üåê ${file}: ${(originalSize / 1024).toFixed(2)}KB ‚Üí ${(optimizedSize / 1024).toFixed(2)}KB`);
    }
    
    this.buildStats.optimizedSize += totalOptimizedSize;
  }

  /**
   * –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è HTML
   */
  async minifyHTML(filePath) {
    try {
      let html = await this.readFile(filePath);
      
      if (this.optimizationConfig.removeComments) {
        html = html.replace(/<!--[\s\S]*?-->/g, '');
      }
      
      if (this.optimizationConfig.minify) {
        html = html
          .replace(/\s+/g, ' ')
          .replace(/>\s+</g, '><')
          .trim();
      }
      
      return html;
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ HTML ${filePath}:`, error);
      return await this.readFile(filePath);
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async optimizeImages() {
    console.log('üñºÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    if (!this.optimizationConfig.optimizeImages) {
      console.log('  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)');
      return;
    }
    
    const imageFiles = this.getImageFiles();
    
    for (const file of imageFiles) {
      const originalSize = this.getFileSize(file);
      console.log(`  üñºÔ∏è ${file}: ${(originalSize / 1024).toFixed(2)}KB`);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      // —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WebP, —Å–∂–∞—Ç–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async setupCaching() {
    console.log('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    if (this.optimizationConfig.cacheBusting) {
      await this.generateCacheBusting();
    }
    
    await this.updateServiceWorker();
    await this.generateManifest();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è cache busting
   */
  async generateCacheBusting() {
    const timestamp = Date.now();
    const version = `v${timestamp}`;
    
    console.log(`  üîÑ –í–µ—Ä—Å–∏—è –∫—ç—à–∞: ${version}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã —Å –≤–µ—Ä—Å–∏–µ–π
    const htmlFiles = this.getHTMLFiles();
    
    for (const file of htmlFiles) {
      let html = await this.readFile(file);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∫ CSS –∏ JS —Ñ–∞–π–ª–∞–º
      html = html.replace(
        /(href|src)=["']([^"']*\.(css|js))["']/g,
        `$1="$2?v=${timestamp}"`
      );
      
      await this.writeFile(file, html);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service Worker
   */
  async updateServiceWorker() {
    const swContent = `
// Service Worker –¥–ª—è MyFitness App
const CACHE_NAME = 'myfitness-v${Date.now()}';
const urlsToCache = [
  '/',
  '/index.html',
  '/js/app.js',
  '/js/modules/config.js',
  '/js/modules/storage.js',
  '/js/utils/logger.js'
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(urlsToCache))
  );
});

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => response || fetch(event.request))
  );
});

self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
    `.trim();
    
    await this.writeFile('service-worker.js', swContent);
    console.log('  üîÑ Service Worker –æ–±–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
   */
  async generateManifest() {
    const manifest = {
      name: 'MyFitness App',
      short_name: 'MyFitness',
      description: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
      start_url: '/',
      display: 'standalone',
      background_color: '#ffffff',
      theme_color: '#007bff',
      icons: [
        {
          src: '/icons/icon.svg',
          sizes: 'any',
          type: 'image/svg+xml'
        }
      ],
      version: `1.0.${Date.now()}`
    };
    
    await this.writeFile('manifest.json', JSON.stringify(manifest, null, 2));
    console.log('  üìã –ú–∞–Ω–∏—Ñ–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
   */
  async generateReports() {
    console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...');
    
    this.buildStats.compressionRatio = 
      ((this.buildStats.originalSize - this.buildStats.optimizedSize) / this.buildStats.originalSize) * 100;
    
    const report = {
      timestamp: new Date().toISOString(),
      optimization: this.optimizationConfig,
      stats: this.buildStats,
      recommendations: this.generateRecommendations()
    };
    
    await this.writeFile('build-report.json', JSON.stringify(report, null, 2));
    console.log('  üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ build-report.json');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  generateRecommendations() {
    const recommendations = [];
    
    if (this.buildStats.compressionRatio < 20) {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    }
    
    if (this.buildStats.originalSize > 1024 * 1024) {
      recommendations.push('–†–∞–∑–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1MB, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É');
    }
    
    if (this.buildStats.filesProcessed > 20) {
      recommendations.push('–ú–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –±–∞–Ω–¥–ª—ã');
    }
    
    return recommendations;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  getJavaScriptFiles() {
    return [
      'js/app.js',
      'js/modules/config.js',
      'js/modules/storage.js',
      'js/modules/exercises.js',
      'js/modules/yandex-api.js',
      'js/modules/ai-service.js',
      'js/modules/history-manager.js',
      'js/modules/settings-manager.js',
      'js/modules/body-analysis-manager.js',
      'js/modules/progress-manager.js',
      'js/utils/logger.js',
      'js/utils/validator.js',
      'js/utils/dom.js',
      'js/components/ui-manager.js'
    ];
  }

  getCSSFiles() {
    return [
      'index.html' // CSS –≤—Å—Ç—Ä–æ–µ–Ω –≤ HTML
    ];
  }

  getHTMLFiles() {
    return [
      'index.html'
    ];
  }

  getImageFiles() {
    return [
      'icons/icon.svg'
    ];
  }

  calculateTotalSize(files) {
    return files.reduce((total, file) => total + this.getFileSize(file), 0);
  }

  getFileSize(filePath) {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      return 1024; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    } catch (error) {
      return 0;
    }
  }

  async readFile(filePath) {
    try {
      const response = await fetch(filePath);
      return await response.text();
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ${filePath}:`, error);
      return '';
    }
  }

  async writeFile(filePath, content) {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      console.log(`üíæ –§–∞–π–ª ${filePath} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª ${filePath}:`, error);
    }
  }

  /**
   * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  printOptimizationResults() {
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    console.log('============================');
    console.log(`üìè –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(this.buildStats.originalSize / 1024).toFixed(2)} KB`);
    console.log(`üìè –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(this.buildStats.optimizedSize / 1024).toFixed(2)} KB`);
    console.log(`üìâ –°–∂–∞—Ç–∏–µ: ${this.buildStats.compressionRatio.toFixed(1)}%`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${this.buildStats.timeSpent.toFixed(2)}ms`);
    console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${this.buildStats.filesProcessed}`);
    console.log('============================');
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
const productionOptimizer = new ProductionOptimizer();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.productionOptimizer = productionOptimizer;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (window.location.hostname === 'localhost' || window.location.hostname.includes('github.io')) {
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
      console.log('üè≠ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω');
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ window.productionOptimizer.optimizeForProduction() –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
    }, 8000);
  });
}
