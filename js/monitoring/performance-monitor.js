/**
 * –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MyFitness App
 * 
 * @fileoverview –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –æ—à–∏–±–æ–∫ –∏ –º–µ—Ç—Ä–∏–∫
 * @version 1.0.0
 * @author MyFitness App Team
 */

class PerformanceMonitor {
  constructor() {
    this.metrics = {
      pageLoad: {},
      apiCalls: [],
      errors: [],
      userActions: [],
      memoryUsage: [],
      performanceMarks: {}
    };
    
    this.config = {
      enabled: true,
      sampleRate: 1.0, // 100% —Å–æ–±—ã—Ç–∏–π
      maxErrors: 100,
      maxMetrics: 1000,
      reportInterval: 60000, // 1 –º–∏–Ω—É—Ç–∞
      enableRealTime: true
    };
    
    this.observers = [];
    this.isInitialized = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  init() {
    if (this.isInitialized) return;
    
    console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    
    try {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      this.setupPerformanceObservers();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
      this.setupErrorHandlers();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤
      this.setupAPIMonitoring();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.setupUserActionTracking();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
      this.setupMemoryMonitoring();
      
      // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
      this.startPeriodicReporting();
      
      this.isInitialized = true;
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  setupPerformanceObservers() {
    // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if ('PerformanceObserver' in window) {
      const performanceObserver = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          this.recordPerformanceMetric(entry);
        }
      });
      
      performanceObserver.observe({ entryTypes: ['navigation', 'resource', 'paint'] });
    }
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('load', () => {
      const loadTime = performance.now();
      this.metrics.pageLoad = {
        timestamp: Date.now(),
        loadTime: loadTime,
        domContentLoaded: performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart,
        firstPaint: this.getFirstPaint(),
        firstContentfulPaint: this.getFirstContentfulPaint()
      };
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
   */
  setupErrorHandlers() {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    window.addEventListener('error', (event) => {
      this.recordError({
        type: 'error',
        message: event.message,
        filename: event.filename,
        lineno: event.lineno,
        colno: event.colno,
        timestamp: Date.now(),
        stack: event.error?.stack
      });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
    window.addEventListener('unhandledrejection', (event) => {
      this.recordError({
        type: 'unhandledrejection',
        message: event.reason?.message || 'Unhandled Promise Rejection',
        timestamp: Date.now(),
        stack: event.reason?.stack
      });
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API –≤—ã–∑–æ–≤–æ–≤
   */
  setupAPIMonitoring() {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch –∑–∞–ø—Ä–æ—Å–æ–≤
    const originalFetch = window.fetch;
    window.fetch = async (...args) => {
      const startTime = performance.now();
      const url = args[0];
      
      try {
        const response = await originalFetch(...args);
        const endTime = performance.now();
        
        this.recordAPICall({
          url: url,
          method: args[1]?.method || 'GET',
          status: response.status,
          duration: endTime - startTime,
          timestamp: Date.now(),
          success: response.ok
        });
        
        return response;
      } catch (error) {
        const endTime = performance.now();
        
        this.recordAPICall({
          url: url,
          method: args[1]?.method || 'GET',
          status: 0,
          duration: endTime - startTime,
          timestamp: Date.now(),
          success: false,
          error: error.message
        });
        
        throw error;
      }
    };
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  setupUserActionTracking() {
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤
    document.addEventListener('click', (event) => {
      this.recordUserAction({
        type: 'click',
        target: event.target.tagName,
        id: event.target.id,
        className: event.target.className,
        timestamp: Date.now()
      });
    });
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.addEventListener('navigation', (event) => {
      this.recordUserAction({
        type: 'navigation',
        from: event.detail?.from,
        to: event.detail?.to,
        timestamp: Date.now()
      });
    });
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º
    document.addEventListener('submit', (event) => {
      this.recordUserAction({
        type: 'form_submit',
        formId: event.target.id,
        timestamp: Date.now()
      });
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
   */
  setupMemoryMonitoring() {
    if ('memory' in performance) {
      setInterval(() => {
        this.recordMemoryUsage({
          usedJSHeapSize: performance.memory.usedJSHeapSize,
          totalJSHeapSize: performance.memory.totalJSHeapSize,
          jsHeapSizeLimit: performance.memory.jsHeapSizeLimit,
          timestamp: Date.now()
        });
      }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
   */
  startPeriodicReporting() {
    setInterval(() => {
      this.generateReport();
    }, this.config.reportInterval);
  }

  /**
   * –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  recordPerformanceMetric(entry) {
    if (!this.config.enabled) return;
    
    const metric = {
      name: entry.name,
      type: entry.entryType,
      duration: entry.duration,
      startTime: entry.startTime,
      timestamp: Date.now()
    };
    
    this.metrics.performanceMarks[entry.name] = metric;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫
    if (Object.keys(this.metrics.performanceMarks).length > this.config.maxMetrics) {
      const oldestKey = Object.keys(this.metrics.performanceMarks)[0];
      delete this.metrics.performanceMarks[oldestKey];
    }
  }

  /**
   * –ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏
   */
  recordError(error) {
    if (!this.config.enabled) return;
    
    this.metrics.errors.push(error);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
    if (this.metrics.errors.length > this.config.maxErrors) {
      this.metrics.errors.shift();
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
    this.notifyObservers('error', error);
  }

  /**
   * –ó–∞–ø–∏—Å—å API –≤—ã–∑–æ–≤–∞
   */
  recordAPICall(apiCall) {
    if (!this.config.enabled) return;
    
    this.metrics.apiCalls.push(apiCall);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    if (this.metrics.apiCalls.length > this.config.maxMetrics) {
      this.metrics.apiCalls.shift();
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    if (apiCall.duration > 1000) { // –ë–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
      this.notifyObservers('slow_api', apiCall);
    }
  }

  /**
   * –ó–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  recordUserAction(action) {
    if (!this.config.enabled) return;
    
    this.metrics.userActions.push(action);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
    if (this.metrics.userActions.length > this.config.maxMetrics) {
      this.metrics.userActions.shift();
    }
  }

  /**
   * –ó–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
   */
  recordMemoryUsage(memory) {
    if (!this.config.enabled) return;
    
    this.metrics.memoryUsage.push(memory);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    if (this.metrics.memoryUsage.length > 100) {
      this.metrics.memoryUsage.shift();
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏
    const usagePercent = (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100;
    if (usagePercent > 80) {
      this.notifyObservers('high_memory', { ...memory, usagePercent });
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
   */
  generateReport() {
    const report = {
      timestamp: Date.now(),
      pageLoad: this.metrics.pageLoad,
      apiCalls: this.getAPICallStats(),
      errors: this.getErrorStats(),
      userActions: this.getUserActionStats(),
      memoryUsage: this.getMemoryStats(),
      performance: this.getPerformanceStats()
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    this.sendReport(report);
    
    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (window.location.hostname === 'localhost' || window.location.hostname.includes('github.io')) {
      this.printReport(report);
    }
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –≤—ã–∑–æ–≤–æ–≤
   */
  getAPICallStats() {
    const calls = this.metrics.apiCalls;
    if (calls.length === 0) return {};
    
    const successful = calls.filter(call => call.success);
    const failed = calls.filter(call => !call.success);
    const durations = calls.map(call => call.duration);
    
    return {
      total: calls.length,
      successful: successful.length,
      failed: failed.length,
      successRate: (successful.length / calls.length) * 100,
      averageDuration: durations.reduce((a, b) => a + b, 0) / durations.length,
      maxDuration: Math.max(...durations),
      minDuration: Math.min(...durations)
    };
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
   */
  getErrorStats() {
    const errors = this.metrics.errors;
    if (errors.length === 0) return {};
    
    const errorTypes = {};
    errors.forEach(error => {
      errorTypes[error.type] = (errorTypes[error.type] || 0) + 1;
    });
    
    return {
      total: errors.length,
      types: errorTypes,
      recent: errors.slice(-5) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
    };
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getUserActionStats() {
    const actions = this.metrics.userActions;
    if (actions.length === 0) return {};
    
    const actionTypes = {};
    actions.forEach(action => {
      actionTypes[action.type] = (actionTypes[action.type] || 0) + 1;
    });
    
    return {
      total: actions.length,
      types: actionTypes,
      recent: actions.slice(-10) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–µ–π—Å—Ç–≤–∏–π
    };
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
   */
  getMemoryStats() {
    const memory = this.metrics.memoryUsage;
    if (memory.length === 0) return {};
    
    const latest = memory[memory.length - 1];
    const usagePercent = (latest.usedJSHeapSize / latest.jsHeapSizeLimit) * 100;
    
    return {
      current: {
        used: latest.usedJSHeapSize,
        total: latest.totalJSHeapSize,
        limit: latest.jsHeapSizeLimit,
        usagePercent: usagePercent
      },
      trend: memory.slice(-5) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–∑–º–µ—Ä–µ–Ω–∏–π
    };
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getPerformanceStats() {
    const marks = Object.values(this.metrics.performanceMarks);
    if (marks.length === 0) return {};
    
    const durations = marks.map(mark => mark.duration);
    
    return {
      totalMarks: marks.length,
      averageDuration: durations.reduce((a, b) => a + b, 0) / durations.length,
      maxDuration: Math.max(...durations),
      minDuration: Math.min(...durations),
      recentMarks: marks.slice(-10) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–µ—Ç–æ–∫
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
   */
  sendReport(report) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, Google Analytics, Mixpanel, –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    
    if (this.config.enableRealTime) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      this.sendToAnalytics(report);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
   */
  sendToAnalytics(data) {
    try {
      // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Analytics
      if (typeof gtag !== 'undefined') {
        gtag('event', 'performance_metrics', {
          event_category: 'performance',
          event_label: 'app_metrics',
          value: data.apiCalls?.averageDuration || 0,
          custom_parameters: data
        });
      }
      
      // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      fetch('/api/analytics', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      }).catch(error => {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É:', error);
      });
      
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  printReport(report) {
    console.log('üìä –û—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
    console.log('============================');
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${report.pageLoad?.loadTime?.toFixed(2)}ms`);
    console.log(`üåê API –≤—ã–∑–æ–≤—ã: ${report.apiCalls?.total || 0} (${report.apiCalls?.successRate?.toFixed(1)}% —É—Å–ø–µ—à–Ω—ã—Ö)`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${report.errors?.total || 0}`);
    console.log(`üë§ –î–µ–π—Å—Ç–≤–∏—è: ${report.userActions?.total || 0}`);
    console.log(`üíæ –ü–∞–º—è—Ç—å: ${report.memoryUsage?.current?.usagePercent?.toFixed(1)}%`);
    console.log('============================');
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
   */
  addObserver(callback) {
    this.observers.push(callback);
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
   */
  notifyObservers(event, data) {
    this.observers.forEach(observer => {
      try {
        observer(event, data);
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –≤ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ:', error);
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
   */
  getMetrics() {
    return { ...this.metrics };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫
   */
  clearMetrics() {
    this.metrics = {
      pageLoad: {},
      apiCalls: [],
      errors: [],
      userActions: [],
      memoryUsage: [],
      performanceMarks: {}
    };
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  getFirstPaint() {
    const paintEntries = performance.getEntriesByType('paint');
    const firstPaint = paintEntries.find(entry => entry.name === 'first-paint');
    return firstPaint ? firstPaint.startTime : 0;
  }

  getFirstContentfulPaint() {
    const paintEntries = performance.getEntriesByType('paint');
    const firstContentfulPaint = paintEntries.find(entry => entry.name === 'first-contentful-paint');
    return firstContentfulPaint ? firstContentfulPaint.startTime : 0;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  mark(name) {
    if (performance.mark) {
      performance.mark(name);
    }
  }

  /**
   * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –º–µ—Ç–∫–∞–º–∏
   */
  measure(name, startMark, endMark) {
    if (performance.measure) {
      try {
        performance.measure(name, startMark, endMark);
        const measure = performance.getEntriesByName(name)[0];
        this.recordPerformanceMetric(measure);
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
      }
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const performanceMonitor = new PerformanceMonitor();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.performanceMonitor = performanceMonitor;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
  setTimeout(() => {
    performanceMonitor.init();
  }, 1000);
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (window.location.hostname === 'localhost' || window.location.hostname.includes('github.io')) {
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
      console.log('üìä –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
      console.log('üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
      console.log('   window.performanceMonitor.getMetrics() - –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏');
      console.log('   window.performanceMonitor.generateReport() - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç');
      console.log('   window.performanceMonitor.clearMetrics() - –æ—á–∏—Å—Ç–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏');
    }, 9000);
  });
}
