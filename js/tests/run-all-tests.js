/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ MyFitness App
 * 
 * @fileoverview –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @version 1.0.0
 * @author MyFitness App Team
 */

// –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–µ—Ä–æ–≤
import { logger } from '../utils/logger.js';

class TestRunner {
  constructor() {
    this.testSuites = [
      { name: '–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã', runner: window.moduleTester },
      { name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã', runner: window.integrationTester },
      { name: 'E2E —Ç–µ—Å—Ç—ã', runner: window.e2eTester },
      { name: '–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', runner: window.performanceTester }
    ];
    this.results = {
      total: 0,
      passed: 0,
      failed: 0,
      suites: []
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests() {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ MyFitness App');
    logger.info('=====================================');
    
    const startTime = performance.now();
    
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã
      for (const suite of this.testSuites) {
        if (suite.runner && typeof suite.runner.runAllTests === 'function') {
          logger.info(`üß™ –ó–∞–ø—É—Å–∫ ${suite.name}...`);
          
          const suiteStartTime = performance.now();
          await suite.runner.runAllTests();
          const suiteTime = performance.now() - suiteStartTime;
          
          this.results.suites.push({
            name: suite.name,
            time: suiteTime,
            status: 'completed'
          });
          
          logger.success(`‚úÖ ${suite.name} –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ ${suiteTime.toFixed(2)}ms`);
        } else {
          logger.warn(`‚ö†Ô∏è ${suite.name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã`);
          this.results.suites.push({
            name: suite.name,
            time: 0,
            status: 'unavailable'
          });
        }
      }
      
      const totalTime = performance.now() - startTime;
      
      // –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.printSummary(totalTime);
      
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
   */
  async runTestSuite(suiteName) {
    const suite = this.testSuites.find(s => s.name === suiteName);
    
    if (!suite) {
      logger.error(`–¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä "${suiteName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    if (!suite.runner || typeof suite.runner.runAllTests !== 'function') {
      logger.error(`–¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä "${suiteName}" –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      return;
    }
    
    logger.info(`üß™ –ó–∞–ø—É—Å–∫ ${suiteName}...`);
    const startTime = performance.now();
    
    try {
      await suite.runner.runAllTests();
      const time = performance.now() - startTime;
      logger.success(`‚úÖ ${suiteName} –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ ${time.toFixed(2)}ms`);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${suiteName}:`, error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—å–Ω—ã–µ)
   */
  async runQuickTests() {
    logger.info('‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤...');
    
    if (window.moduleTester && typeof window.moduleTester.runAllTests === 'function') {
      const startTime = performance.now();
      await window.moduleTester.runAllTests();
      const time = performance.now() - startTime;
      logger.success(`‚úÖ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ ${time.toFixed(2)}ms`);
    } else {
      logger.error('–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async runPerformanceTests() {
    logger.info('‚ö° –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    if (window.performanceTester && typeof window.performanceTester.runAllTests === 'function') {
      const startTime = performance.now();
      await window.performanceTester.runAllTests();
      const time = performance.now() - startTime;
      logger.success(`‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ ${time.toFixed(2)}ms`);
    } else {
      logger.error('–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
   */
  async runUserScenarios() {
    logger.info('üé≠ –ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...');
    
    if (window.e2eTester && typeof window.e2eTester.runAllTests === 'function') {
      const startTime = performance.now();
      await window.e2eTester.runAllTests();
      const time = performance.now() - startTime;
      logger.success(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ ${time.toFixed(2)}ms`);
    } else {
      logger.error('E2E —Ç–µ—Å—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }
  }

  /**
   * –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  printSummary(totalTime) {
    logger.info('üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    logger.info('=====================================');
    
    this.results.suites.forEach(suite => {
      const status = suite.status === 'completed' ? '‚úÖ' : '‚ö†Ô∏è';
      const timeStr = suite.time > 0 ? ` (${suite.time.toFixed(2)}ms)` : '';
      logger.info(`${status} ${suite.name}${timeStr}`);
    });
    
    logger.info('=====================================');
    logger.info(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime.toFixed(2)}ms`);
    logger.info('üéØ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
   */
  getAvailableTests() {
    return this.testSuites
      .filter(suite => suite.runner && typeof suite.runner.runAllTests === 'function')
      .map(suite => suite.name);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤
   */
  checkTestReadiness() {
    logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤...');
    
    const available = this.getAvailableTests();
    const unavailable = this.testSuites
      .filter(suite => !suite.runner || typeof suite.runner.runAllTests !== 'function')
      .map(suite => suite.name);
    
    if (available.length > 0) {
      logger.success(`‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã: ${available.join(', ')}`);
    }
    
    if (unavailable.length > 0) {
      logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã: ${unavailable.join(', ')}`);
    }
    
    return {
      available,
      unavailable,
      total: this.testSuites.length
    };
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–µ—Ä–∞
const testRunner = new TestRunner();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.testRunner = testRunner;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (window.location.hostname === 'localhost' || window.location.hostname.includes('github.io')) {
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
      console.log('üöÄ –ì–ª–∞–≤–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω');
      console.log('üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
      console.log('   window.testRunner.runAllTests() - –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤');
      console.log('   window.testRunner.runQuickTests() - –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã');
      console.log('   window.testRunner.runPerformanceTests() - —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
      console.log('   window.testRunner.runUserScenarios() - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏');
      console.log('   window.testRunner.checkTestReadiness() - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
      testRunner.checkTestReadiness();
    }, 7000);
  });
}
