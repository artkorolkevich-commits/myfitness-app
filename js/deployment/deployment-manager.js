/**
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º MyFitness App
 * 
 * @fileoverview –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏
 * @version 1.0.0
 * @author MyFitness App Team
 */

class DeploymentManager {
  constructor() {
    this.deploymentConfig = {
      environments: {
        development: {
          url: 'http://localhost:3000',
          branch: 'develop',
          autoDeploy: true
        },
        staging: {
          url: 'https://staging.myfitness-app.com',
          branch: 'staging',
          autoDeploy: false
        },
        production: {
          url: 'https://artkorolkevich-commits.github.io/myfitness-app/',
          branch: 'main',
          autoDeploy: false
        }
      },
      currentEnvironment: 'development',
      version: '1.0.0',
      buildNumber: Date.now()
    };
    
    this.deploymentHistory = [];
    this.isDeploying = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
   */
  init() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...');
    
    try {
      this.detectEnvironment();
      this.setupVersionTracking();
      this.loadDeploymentHistory();
      
      console.log(`‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è ${this.deploymentConfig.currentEnvironment}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:', error);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  detectEnvironment() {
    const hostname = window.location.hostname;
    const pathname = window.location.pathname;
    
    if (hostname === 'localhost' || hostname === '127.0.0.1') {
      this.deploymentConfig.currentEnvironment = 'development';
    } else if (hostname.includes('staging') || pathname.includes('staging')) {
      this.deploymentConfig.currentEnvironment = 'staging';
    } else if (hostname.includes('github.io') || hostname.includes('production')) {
      this.deploymentConfig.currentEnvironment = 'production';
    }
    
    console.log(`üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: ${this.deploymentConfig.currentEnvironment}`);
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–µ—Ä—Å–∏–π
   */
  setupVersionTracking() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏
    this.deploymentConfig.buildNumber = Date.now();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –≤ localStorage
    const versionInfo = {
      version: this.deploymentConfig.version,
      buildNumber: this.deploymentConfig.buildNumber,
      environment: this.deploymentConfig.currentEnvironment,
      deployedAt: new Date().toISOString()
    };
    
    localStorage.setItem('app_version', JSON.stringify(versionInfo));
    
    console.log(`üì¶ –í–µ—Ä—Å–∏—è: ${this.deploymentConfig.version} (build ${this.deploymentConfig.buildNumber})`);
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π
   */
  loadDeploymentHistory() {
    const history = localStorage.getItem('deployment_history');
    if (history) {
      this.deploymentHistory = JSON.parse(history);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
   */
  async deploy(environment = null) {
    if (this.isDeploying) {
      console.warn('‚ö†Ô∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      return false;
    }
    
    const targetEnv = environment || this.deploymentConfig.currentEnvironment;
    
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ ${targetEnv}...`);
    
    this.isDeploying = true;
    
    try {
      // 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      await this.runPreDeploymentChecks(targetEnv);
      
      // 2. –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      await this.buildApplication();
      
      // 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
      await this.optimizeForProduction();
      
      // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      await this.runDeploymentTests();
      
      // 5. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
      await this.executeDeployment(targetEnv);
      
      // 6. –ü–æ—Å—Ç-—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      await this.runPostDeploymentChecks(targetEnv);
      
      // 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
      this.updateDeploymentHistory(targetEnv, 'success');
      
      console.log(`‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ ${targetEnv} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
      return true;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ ${targetEnv}:`, error);
      this.updateDeploymentHistory(targetEnv, 'failed', error.message);
      return false;
      
    } finally {
      this.isDeploying = false;
    }
  }

  /**
   * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async runPreDeploymentChecks(environment) {
    console.log('üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫...');
    
    const checks = [
      this.checkEnvironmentConfiguration(environment),
      this.checkDependencies(),
      this.checkBuildRequirements(),
      this.checkSecurityRequirements()
    ];
    
    const results = await Promise.allSettled(checks);
    
    const failedChecks = results.filter(result => result.status === 'rejected');
    
    if (failedChecks.length > 0) {
      throw new Error(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: ${failedChecks.length} –æ—à–∏–±–æ–∫`);
    }
    
    console.log('‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  async checkEnvironmentConfiguration(environment) {
    const config = this.deploymentConfig.environments[environment];
    
    if (!config) {
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: ${environment}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
    try {
      const response = await fetch(config.url, { method: 'HEAD' });
      if (!response.ok) {
        throw new Error(`URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${config.url}`);
      }
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${config.url}`);
    }
    
    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  async checkDependencies() {
    const requiredModules = [
      'storage',
      'exerciseManager',
      'yandexAPI',
      'aiService',
      'historyManager',
      'settingsManager',
      'bodyAnalysisManager',
      'progressManager'
    ];
    
    const missingModules = requiredModules.filter(module => !window[module]);
    
    if (missingModules.length > 0) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: ${missingModules.join(', ')}`);
    }
    
    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å–±–æ—Ä–∫–µ
   */
  async checkBuildRequirements() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const requiredFiles = [
      'index.html',
      'js/app.js',
      'js/modules/config.js',
      'manifest.json'
    ];
    
    const missingFiles = [];
    
    for (const file of requiredFiles) {
      try {
        const response = await fetch(file, { method: 'HEAD' });
        if (!response.ok) {
          missingFiles.push(file);
        }
      } catch (error) {
        missingFiles.push(file);
      }
    }
    
    if (missingFiles.length > 0) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: ${missingFiles.join(', ')}`);
    }
    
    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  async checkSecurityRequirements() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    if (this.deploymentConfig.currentEnvironment === 'production') {
      if (window.location.protocol !== 'https:') {
        throw new Error('HTTPS –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content Security Policy
    const cspHeader = document.querySelector('meta[http-equiv="Content-Security-Policy"]');
    if (!cspHeader) {
      console.warn('‚ö†Ô∏è Content Security Policy –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    return true;
  }

  /**
   * –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async buildApplication() {
    console.log('üî® –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Å–±–æ—Ä–∫–∞ —Å –ø–æ–º–æ—â—å—é Webpack, Rollup –∏–ª–∏ Vite
      console.log('  üì¶ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π...');
      console.log('  üéØ –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞...');
      console.log('  üñºÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤...');
      
      // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      console.log('‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: ${error.message}`);
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
   */
  async optimizeForProduction() {
    console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...');
    
    try {
      if (window.productionOptimizer) {
        await window.productionOptimizer.optimizeForProduction();
      } else {
        console.log('  ‚è≠Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
   */
  async runDeploymentTests() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...');
    
    try {
      if (window.testRunner) {
        await window.testRunner.runQuickTests();
      } else {
        console.log('  ‚è≠Ô∏è –¢–µ—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
   */
  async executeDeployment(environment) {
    console.log(`üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ ${environment}...`);
    
    const config = this.deploymentConfig.environments[environment];
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
      // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ GitHub Actions, Netlify, Vercel –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
      
      console.log(`  üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ ${config.url}...`);
      console.log(`  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞...`);
      console.log(`  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...`);
      
      // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log(`‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ ${environment} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: ${error.message}`);
    }
  }

  /**
   * –ü–æ—Å—Ç-—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async runPostDeploymentChecks(environment) {
    console.log('üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç-—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫...');
    
    const config = this.deploymentConfig.environments[environment];
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const response = await fetch(config.url);
      if (!response.ok) {
        throw new Error('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      await this.checkApplicationHealth();
      
      console.log('‚úÖ –ü–æ—Å—Ç-—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã');
      
    } catch (error) {
      throw new Error(`–ü–æ—Å—Ç-—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async checkApplicationHealth() {
    const healthChecks = [
      this.checkStorageModule(),
      this.checkExerciseManager(),
      this.checkYandexAPI(),
      this.checkAIService()
    ];
    
    const results = await Promise.allSettled(healthChecks);
    const failedChecks = results.filter(result => result.status === 'rejected');
    
    if (failedChecks.length > 0) {
      throw new Error(`–ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: ${failedChecks.length} –æ—à–∏–±–æ–∫`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   */
  async checkStorageModule() {
    if (!window.storage) {
      throw new Error('–ú–æ–¥—É–ª—å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const testData = { test: 'data' };
    window.storage.saveConfig(testData);
    const loadedData = window.storage.loadConfig();
    
    if (!loadedData.test) {
      throw new Error('–ú–æ–¥—É–ª—å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
   */
  async checkExerciseManager() {
    if (!window.exerciseManager) {
      throw new Error('–ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    const exercises = window.exerciseManager.getAllExercises();
    if (!exercises || exercises.length === 0) {
      throw new Error('–ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ');
    }
    
    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ Yandex API
   */
  async checkYandexAPI() {
    if (!window.yandexAPI) {
      throw new Error('Yandex API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (!window.yandexAPI.isAuthenticated) {
      console.log('  ‚ÑπÔ∏è Yandex API –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)');
    }
    
    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞
   */
  async checkAIService() {
    if (!window.aiService) {
      throw new Error('AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    return true;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π
   */
  updateDeploymentHistory(environment, status, error = null) {
    const deployment = {
      environment,
      status,
      timestamp: new Date().toISOString(),
      version: this.deploymentConfig.version,
      buildNumber: this.deploymentConfig.buildNumber,
      error: error
    };
    
    this.deploymentHistory.push(deployment);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (this.deploymentHistory.length > 50) {
      this.deploymentHistory = this.deploymentHistory.slice(-50);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('deployment_history', JSON.stringify(this.deploymentHistory));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏
   */
  getVersionInfo() {
    return {
      version: this.deploymentConfig.version,
      buildNumber: this.deploymentConfig.buildNumber,
      environment: this.deploymentConfig.currentEnvironment,
      deployedAt: new Date().toISOString()
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π
   */
  getDeploymentHistory() {
    return [...this.deploymentHistory];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
   */
  getDeploymentStatus() {
    return {
      isDeploying: this.isDeploying,
      currentEnvironment: this.deploymentConfig.currentEnvironment,
      lastDeployment: this.deploymentHistory[this.deploymentHistory.length - 1] || null
    };
  }

  /**
   * –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
   */
  async rollback(environment) {
    console.log(`üîÑ –û—Ç–∫–∞—Ç ${environment} –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏...`);
    
    const history = this.deploymentHistory
      .filter(d => d.environment === environment && d.status === 'success')
      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    if (history.length < 2) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–µ—Ä—Å–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞');
    }
    
    const previousVersion = history[1];
    
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–∞—Ç–∞
      console.log(`  üîÑ –û—Ç–∫–∞—Ç –∫ –≤–µ—Ä—Å–∏–∏ ${previousVersion.version} (build ${previousVersion.buildNumber})...`);
      
      // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫–∞—Ç–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      this.updateDeploymentHistory(environment, 'rollback', null);
      
      console.log(`‚úÖ –û—Ç–∫–∞—Ç ${environment} –∑–∞–≤–µ—Ä—à–µ–Ω`);
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: ${error.message}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
   */
  generateDeploymentReport() {
    const report = {
      timestamp: new Date().toISOString(),
      version: this.deploymentConfig.version,
      buildNumber: this.deploymentConfig.buildNumber,
      environment: this.deploymentConfig.currentEnvironment,
      status: this.getDeploymentStatus(),
      history: this.getDeploymentHistory(),
      statistics: this.getDeploymentStatistics()
    };
    
    return report;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π
   */
  getDeploymentStatistics() {
    const stats = {
      total: this.deploymentHistory.length,
      successful: this.deploymentHistory.filter(d => d.status === 'success').length,
      failed: this.deploymentHistory.filter(d => d.status === 'failed').length,
      rollbacks: this.deploymentHistory.filter(d => d.status === 'rollback').length,
      byEnvironment: {}
    };
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º
    this.deploymentConfig.environments.forEach(env => {
      const envDeployments = this.deploymentHistory.filter(d => d.environment === env);
      stats.byEnvironment[env] = {
        total: envDeployments.length,
        successful: envDeployments.filter(d => d.status === 'success').length,
        failed: envDeployments.filter(d => d.status === 'failed').length
      };
    });
    
    return stats;
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
const deploymentManager = new DeploymentManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.deploymentManager = deploymentManager;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
  setTimeout(() => {
    deploymentManager.init();
  }, 1000);
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (window.location.hostname === 'localhost' || window.location.hostname.includes('github.io')) {
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
      console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
      console.log('üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
      console.log('   window.deploymentManager.deploy() - —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ');
      console.log('   window.deploymentManager.getVersionInfo() - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏');
      console.log('   window.deploymentManager.getDeploymentHistory() - –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π');
      console.log('   window.deploymentManager.generateDeploymentReport() - –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏');
    }, 10000);
  });
}
